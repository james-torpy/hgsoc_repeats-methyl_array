library(tibble)
library(dplyr)
library(qvalue)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)
home_dir <- "/Users/jamestorpy/clusterHome/"
#home_dir <- "/share/ScratchGeneral/jamtor/"
project_dir <- paste0(home_dir, "/projects/hgsoc_repeats/methyl_array/")
result_dir <- paste0(project_dir, "/results/")
Robject_dir <- paste0(project_dir, "/Robjects/")
system(paste0("mkdir -p ", result_dir))
system(paste0("mkdir -p ", Robject_dir))
##############################################################################
### 0. Load in data and convert to m-values ###
##############################################################################
# load in beta-values:
b_values <- read.csv(file = paste0(result_dir,
"/bowtell_trimmed_methylation_array_b-values.csv"), header = T)
# make first column rownames and remove:
rownames(b_values) <- b_values[,1]
b_values <- subset(b_values, select = -X)
if ( !file.exists(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds")) ) {
# convert all beta-values to m_values - '2' will automatically be converted
# to NA:
m_values <- log2(b_temp/(1-b_temp))
saveRDS(m_values, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
} else {
m_values <- readRDS(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
}
split_and_filter <- function(x, min_rows) {
# split into HGSOC and FT values:
FT_m <- x[,grep("ICGC", colnames(x), invert = T)]
HGSOC_m <- x[,grep("ICGC", colnames(x))]
# remove any rows with less than 4 values per group:
print(paste0("No. rows in FT_m before filtering is: ", nrow(FT_m)))
FT_m <- FT_m %>%
rownames_to_column('probe_id') %>%
dplyr::filter((rowSums(!is.na(FT_m)) >= min_rows)) %>%
column_to_rownames('probe_id')
print(paste0("No. rows in FT_m after filtering is: ", nrow(FT_m)))
print(paste0("No. rows in HGSOC_m before filtering is: ", nrow(HGSOC_m)))
HGSOC_m <- HGSOC_m %>%
rownames_to_column('probe_id') %>%
dplyr::filter((rowSums(!is.na(HGSOC_m)) >= min_row)) %>%
column_to_rownames('probe_id')
print(paste0("No. rows in HGSOC_m after filtering is: ", nrow(HGSOC_m)))
}
split_and_filter(m_values, 4)
split_and_filter <- function(x, min_rows) {
# split into HGSOC and FT values:
FT_m <- x[,grep("ICGC", colnames(x), invert = T)]
HGSOC_m <- x[,grep("ICGC", colnames(x))]
# remove any rows with less than 4 values per group:
print(paste0("No. rows in FT_m before filtering is: ", nrow(FT_m)))
FT_m <- FT_m %>%
rownames_to_column('probe_id') %>%
dplyr::filter((rowSums(!is.na(FT_m)) >= min_rows)) %>%
column_to_rownames('probe_id')
print(paste0("No. rows in FT_m after filtering is: ", nrow(FT_m)))
print(paste0("No. rows in HGSOC_m before filtering is: ", nrow(HGSOC_m)))
HGSOC_m <- HGSOC_m %>%
rownames_to_column('probe_id') %>%
dplyr::filter((rowSums(!is.na(HGSOC_m)) >= min_rows)) %>%
column_to_rownames('probe_id')
print(paste0("No. rows in HGSOC_m after filtering is: ", nrow(HGSOC_m)))
}
split_and_filter(m_values, 4)
saveRDS(m_values, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
apply_test <- function(ctl, treat, test_type) {
if ( test_type == "t-test" ) {
i=1
pvals <- apply(ctl, 1, function(x) {
print(i)
tres <- tryCatch(
t.test(x, treat[i,], conf.level = 0.9),
error=function(err) NA
)
if ( !is.na(tres) ) {
res <- tres$p.value
} else {
res <- NA
}
i <<- i+1
return(res)
})
} else if ( test_type == "wilcox") {
i=1
pvals <- apply(ctl, 1, function(x) {
print(i)
wres <- tryCatch(
wilcox.test(x, treat[i,], conf.level = 0.9),
error=function(err) NA
)
if ( !is.na(wres) ) {
res <- wres$p.value
} else {
res <- NA
}
i <<- i+1
return(res)
})
}
return(pvals)
}
m_values <- readRDS(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
rm(list=ls())
library(tibble)
library(dplyr)
library(qvalue)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)
home_dir <- "/Users/jamestorpy/clusterHome/"
#home_dir <- "/share/ScratchGeneral/jamtor/"
project_dir <- paste0(home_dir, "/projects/hgsoc_repeats/methyl_array/")
result_dir <- paste0(project_dir, "/results/")
Robject_dir <- paste0(project_dir, "/Robjects/")
system(paste0("mkdir -p ", result_dir))
system(paste0("mkdir -p ", Robject_dir))
##############################################################################
### 0. Load in data and convert to m-values ###
##############################################################################
# load in beta-values:
b_values <- read.csv(file = paste0(result_dir,
"/bowtell_trimmed_methylation_array_b-values.csv"), header = T)
# make first column rownames and remove:
rownames(b_values) <- b_values[,1]
b_values <- subset(b_values, select = -X)
# create function to split values into control and treatment data frames and
# filter for QC:
split_and_filter <- function(x, min_rows) {
# split into HGSOC and FT values:
FT <- x[,grep("ICGC", colnames(x), invert = T)]
HGSOC <- x[,grep("ICGC", colnames(x))]
# remove any rows with less than 4 values per group:
print(paste0("No. rows in FT before filtering is: ", nrow(FT)))
FT <- FT %>%
rownames_to_column('probe_id') %>%
dplyr::filter((rowSums(!is.na(FT)) >= min_rows)) %>%
column_to_rownames('probe_id')
print(paste0("No. rows in FT after filtering is: ", nrow(FT)))
print(paste0("No. rows in HGSOC before filtering is: ", nrow(HGSOC)))
HGSOC <- HGSOC %>%
rownames_to_column('probe_id') %>%
dplyr::filter((rowSums(!is.na(HGSOC)) >= min_rows)) %>%
column_to_rownames('probe_id')
print(paste0("No. rows in HGSOC after filtering is: ", nrow(HGSOC)))
return(list(FT, HGSOC))
}
if ( !file.exists(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_b-values.rds")) ) {
# split and filter beta values:
b_list <- split_and_filter(b_values, 4)
saveRDS(b_list, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_b-values.rds"))
} else {
b_list <- readRDS(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_b-values.rds"))
}
# assign control and treatment m-value data frames:
FT_b <- b_list[[1]]
HGSOC_b <- b_list[[2]]
if ( !file.exists(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds")) ) {
# convert all beta-values to m_values - '2' will automatically be converted
# to NA:
m_values <- log2(b_temp/(1-b_temp))
m_list <- split_and_filter(m_values, 4)
saveRDS(m_list, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
} else {
m_list <- readRDS(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
}
# assign control and treatment m-value data frames:
FT_m <- m_list[[1]]
HGSOC_m <- m_list[[2]]
if ( !file.exists(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds")) ) {
# convert all beta-values to m_values - '2' will automatically be converted
# to NA:
m_values <- log2(b_temp/(1-b_temp))
m_list <- split_and_filter(m_values, 4)
saveRDS(m_list, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
} else {
m_list <- readRDS(paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
}
FT_m <- m_list[[1]]
HGSOC_m <- m_list[[1]]
head(FT_m)
head(HGSOC_m)
FT_b <- b_list[[1]]
HGSOC_b <- b_list[[2]]
FT_m <- m_list[[1]]
HGSOC_m <- m_list[[2]]
head(FT_b)
head(HGSOC_b)
head(FT_b)
head(FT_m)
b_temp[is.na(b_temp)] <- 2
# convert all beta-values to m_values - '2' will automatically be converted
# to NA:
m_values <- log2(b_temp/(1-b_temp))
m_list <- split_and_filter(m_values, 4)
saveRDS(m_list, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
b_temp[is.na(b_values)] <- 2
# convert all beta-values to m_values - '2' will automatically be converted
# to NA:
m_values <- log2(b_temp/(1-b_temp))
m_list <- split_and_filter(m_values, 4)
saveRDS(m_list, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
FT_m <- m_list[[1]]
HGSOC_m <- m_list[[2]]
# convert all beta-values to m_values - '2' will automatically be converted
# to NA:
m_values <- log2(b_temp/(1-b_temp))
b_temp <- b_values
b_temp[is.na(b_temp)] <- 2
# convert all beta-values to m_values - '2' will automatically be converted
# to NA:
m_values <- log2(b_temp/(1-b_temp))
m_list <- split_and_filter(m_values, 4)
saveRDS(m_list, file = paste0(Robject_dir,
"/bowtell_trimmed_methylation_array_m-values.rds"))
FT_m <- m_list[[1]]
HGSOC_m <- m_list[[2]]
head(FT_m)
head(FT_b)
head(HGSOC_m)
head(HGSOC_m[,1:5])
head(HGSOC_b[,1:5])
apply_test <- function(ctl, treat, test_type) {
if ( test_type == "t-test" ) {
i=1
pvals <- apply(ctl, 1, function(x) {
print(i)
tres <- tryCatch(
t.test(x, treat[i,], conf.level = 0.9),
error=function(err) NA
)
if ( !is.na(tres) ) {
res <- tres$p.value
} else {
res <- NA
}
i <<- i+1
return(res)
})
} else if ( test_type == "wilcox") {
i=1
pvals <- apply(ctl, 1, function(x) {
print(i)
wres <- tryCatch(
wilcox.test(x, treat[i,], conf.level = 0.9),
error=function(err) NA
)
if ( !is.na(wres) ) {
res <- wres$p.value
} else {
res <- NA
}
i <<- i+1
return(res)
})
}
return(pvals)
}
if ( !file.exists(paste0(Robject_dir, "/mval_ps.rds")) ) {
# apply unpaired Wilcox test to beta values:
# apply unpaired t-test to beta values:
mval_ps <- apply_test(FT_m, HGSOC_m, "t-test")
names(mval_ps) <- rownames(FT_m)
saveRDS(mval_ps, file = paste0(Robject_dir, "/mval_ps.rds"))
} else {
readRDS(mval_ps, file = paste0(Robject_dir, "/mval_ps.rds"))
}
if ( !file.exists(paste0(Robject_dir, "/mval_ps.rds")) ) {
# apply unpaired Wilcox test to beta values:
# apply unpaired t-test to beta values:
mval_ps <- apply_test(FT_m, HGSOC_m, "t-test")
names(mval_ps) <- rownames(FT_m)
saveRDS(mval_ps, file = paste0(Robject_dir, "/mval_ps.rds"))
} else {
mval_ps <- readRDS(file = paste0(Robject_dir, "/mval_ps.rds"))
}
head(mval_ps)
hist(mval_ps, nclass=20)
mval_qs <- qvalue(mval_ps)
rownames(mval_qs) <- rownames(mval_ps)
library(qvalue)
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
